package com.ducishere.hyperworldgen.registry;

import com.ducishere.hyperworldgen.world.noise.backends.*;
import com.ducishere.hyperworldgen.world.noise.NoiseRegistry;

public class HyperNoiseRegistry {
    public static void register() {
        NoiseRegistry.register("archipelago_backend", ArchipelagoBackend::new);
        NoiseRegistry.register("biome_blend_backend", BiomeBlendBackend::new);
        NoiseRegistry.register("bubble_backend", BubbleBackend::new);
        NoiseRegistry.register("bubble_noise_backend", BubbleNoiseBackend::new);
        NoiseRegistry.register("cave_backend", CaveBackend::new);
        NoiseRegistry.register("cellular_backend", CellularBackend::new);
        NoiseRegistry.register("cellular_distance_backend", CellularDistanceBackend::new);
        NoiseRegistry.register("cellular_weighted_backend", CellularWeightedBackend::new);
        NoiseRegistry.register("cliff_backend", CliffBackend::new);
        NoiseRegistry.register("climate_stack_backend", ClimateStackBackend::new);
        NoiseRegistry.register("continentalness_backend", ContinentalnessBackend::new);
        NoiseRegistry.register("crop_field_backend", CropFieldBackend::new);
        NoiseRegistry.register("curl_backend", CurlBackend::new);
        NoiseRegistry.register("delta_backend", DeltaBackend::new);
        NoiseRegistry.register("dense_point_backend", DensePointBackend::new);
        NoiseRegistry.register("distance_metric_backend", DistanceMetricBackend::new);
        NoiseRegistry.register("domain_warp_backend", DomainWarpBackend::new);
        NoiseRegistry.register("dune_backend", DuneBackend::new);
        NoiseRegistry.register("erosion_backend", ErosionBackend::new);
        NoiseRegistry.register("fbm_backend", FBMBackend::new);
        NoiseRegistry.register("fast_noise_backend", FastNoiseBackend::new);
        NoiseRegistry.register("flow_backend", FlowBackend::new);
        NoiseRegistry.register("fractal_ridged2_backend", FractalRidged2Backend::new);
        NoiseRegistry.register("fractal_ridged_backend", FractalRidgedBackend::new);
        NoiseRegistry.register("gabor_backend", GaborBackend::new);
        NoiseRegistry.register("glacier_backend", GlacierBackend::new);
        NoiseRegistry.register("hybrid_blend_backend", HybridBlendBackend::new);
        NoiseRegistry.register("hydraulic_erosion_backend", HydraulicErosionBackend::new);
        NoiseRegistry.register("index_noise_backend", IndexNoiseBackend::new);
        NoiseRegistry.register("lava_pocket_backend", LavaPocketBackend::new);
        NoiseRegistry.register("macro_terrain_backend", MacroTerrainBackend::new);
        NoiseRegistry.register("mesa_patch_backend", MesaPatchBackend::new);
        NoiseRegistry.register("micro_hills_backend", MicroHillsBackend::new);
        NoiseRegistry.register("moss_backend", MossBackend::new);
        NoiseRegistry.register("multi_scale_backend", MultiScaleBackend::new);
        NoiseRegistry.register("noise_combiner_backend", NoiseCombinerBackend::new);
        NoiseRegistry.register("noise_mask_backend", NoiseMaskBackend::new);
        NoiseRegistry.register("ocean_floor_backend", OceanFloorBackend::new);
        NoiseRegistry.register("octave_sum_backend", OctaveSumBackend::new);
        NoiseRegistry.register("open_simplex_backend", OpenSimplexBackend::new);
        NoiseRegistry.register("patch_backend", PatchBackend::new);
        NoiseRegistry.register("perlin_classic_backend", PerlinClassicBackend::new);
        NoiseRegistry.register("perlin_ridged_hybrid_backend", PerlinRidgedHybridBackend::new);
        NoiseRegistry.register("phase_noise_backend", PhaseNoiseBackend::new);
        NoiseRegistry.register("phase_shifted_octaves_backend", PhaseShiftedOctavesBackend::new);
        NoiseRegistry.register("plateau_backend", PlateauBackend::new);
        NoiseRegistry.register("plateau_edge_backend", PlateauEdgeBackend::new);
        NoiseRegistry.register("quantize_backend", QuantizeBackend::new);
        NoiseRegistry.register("random_seed_grid_backend", RandomSeedGridBackend::new);
        NoiseRegistry.register("reaction_diffusion_backend", ReactionDiffusionBackend::new);
        NoiseRegistry.register("ridged_backend", RidgedBackend::new);
        NoiseRegistry.register("ridged_perlin_backend", RidgedPerlinBackend::new);
        NoiseRegistry.register("river_backend", RiverBackend::new);
        NoiseRegistry.register("river_bank_backend", RiverBankBackend::new);
        NoiseRegistry.register("sand_patch_backend", SandPatchBackend::new);
        NoiseRegistry.register("sediment_backend", SedimentBackend::new);
        NoiseRegistry.register("simplex_backend", SimplexBackend::new);
        NoiseRegistry.register("snow_patch_backend", SnowPatchBackend::new);
        NoiseRegistry.register("sparse_point_backend", SparsePointBackend::new);
        NoiseRegistry.register("sparse_voronoi_backend", SparseVoronoiBackend::new);
        NoiseRegistry.register("spike_backend", SpikeBackend::new);
        NoiseRegistry.register("sponge_backend", SpongeBackend::new);
        NoiseRegistry.register("sponge_noise_backend", SpongeNoiseBackend::new);
        NoiseRegistry.register("terrablend_backend", TerraBlendBackend::new);
        NoiseRegistry.register("terrace_backend", TerraceBackend::new);
        NoiseRegistry.register("terrace_field_backend", TerraceFieldBackend::new);
        NoiseRegistry.register("terrace_step_backend", TerraceStepBackend::new);
        NoiseRegistry.register("thermal_backend", ThermalBackend::new);
        NoiseRegistry.register("thermal_erosion_backend", ThermalErosionBackend::new);
        NoiseRegistry.register("tree_placement_backend", TreePlacementBackend::new);
        NoiseRegistry.register("void_noise_backend", VoidNoiseBackend::new);
        NoiseRegistry.register("volcano_backend", VolcanoBackend::new);
        NoiseRegistry.register("voronoi_backend", VoronoiBackend::new);
        NoiseRegistry.register("voronoi_cave_backend", VoronoiCaveBackend::new);
        NoiseRegistry.register("voronoi_distance_backend", VoronoiDistanceBackend::new);
        NoiseRegistry.register("waterfall_backend", WaterfallBackend::new);
        NoiseRegistry.register("wavelet_backend", WaveletBackend::new);
        NoiseRegistry.register("worley_backend", WorleyBackend::new);
        NoiseRegistry.register("worm_backend", WormBackend::new);
    }
}
